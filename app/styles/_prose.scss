@use "~/styles/system/media";
@use "~/styles/lib/list" as cs_list;
@use "sass:string";
@use "sass:list";

// adapted from TailwindCSS typography plugin
// MIT License, Copyright (c) Tailwind Labs, Inc.

$not: "[class~='not-prose'] *";
@function select($selectors...) {
	$comma: string.unquote(",");
	$selector: cs_list.to_string($selectors, $comma);
	$exclude: string.unquote($not);
	@return string.unquote(":where(#{$selector}):not(:where(#{$exclude}))");
}

@mixin defs {
	--util-prose-fz-title: 1.5rem;
	--util-prose-fz-h1: 1.5rem;
	--util-prose-fz-h2: 1.25rem;
	--util-prose-fz-h3: 1.125rem;
	--util-prose-fz-h4: 1rem;
	--util-prose-fz-h5: 0.875rem;
	--util-prose-fz-h6: 0.75rem;
	--util-prose-fz-body: 1rem;
	--util-prose-fz-body-sm: 0.75rem;
	--util-prose-fz-body-md: 1rem;
	--util-prose-fz-body-lg: 1.125rem;

	--util-prose-lh-title: 1.25;
	--util-prose-lh-h1: 1.25;
	--util-prose-lh-h2: 1.333;
	--util-prose-lh-h3: 1.333;
	--util-prose-lh-h4: 1.5;
	--util-prose-lh-h5: 1.5;
	--util-prose-lh-h6: 1.625;
	--util-prose-lh-body: 1.825;
	--util-prose-lh-sm: 1.875;
	--util-prose-lh-md: 1.667;
	--util-prose-lh-lg: 1.333;

	--util-prose-color-text: var(--cs-color-text);
	--util-prose-weak: var(--cs-color-text-weak);
	--util-prose-weaker: var(--cs-color-text-weaker);
	--util-prose-weakest: var(--cs-color-text-weakest);
	--util-prose-success: var(--cs-color-green-13);
	--util-prose-critical: var(--cs-color-red-12);
	--util-prose-warning: var(--cs-color-yellow-15);

	--util-prose-weight-regular: var(--cs-font-weight-default);
	--util-prose-semibold: var(--cs-font-weight-stronger);
	--util-prose-bold: var(--cs-font-weight-strongest);

	@media (--dark) {
		--util-prose-success: var(--cs-color-green-06);
		--util-prose-critical: var(--cs-color-red-06);
		--util-prose-warning: var(--cs-color-yellow-09);
	}

	@media (--sm) {
		--util-prose-fz-title: 2rem;
		--util-prose-fz-h1: 2rem;
		--util-prose-fz-h2: 1.5rem;
		--util-prose-fz-h3: 1.25rem;
		--util-prose-fz-h4: 1.125rem;
		--util-prose-fz-h5: 1rem;
		--util-prose-fz-h6: 0.875rem;
		--util-prose-fz-body-sm: 0.875rem;
		--util-prose-fz-body-md: 1.125rem;
		--util-prose-fz-body-lg: 1.25rem;
	}

	@media (--lg) {
		--util-prose-fz-title: 2.5rem;
		--util-prose-fz-h1: 2.5rem;
		--util-prose-fz-h2: 2rem;
		--util-prose-fz-h3: 1.625rem;
		--util-prose-fz-h4: 1.325rem;
		--util-prose-fz-body-lg: 1.5rem;
	}
}

@mixin text_base {
	text-transform: none;
	text-decoration: none;
	background: none;
	border: 0;
	margin: 0;
	padding: 0;
	vertical-align: baseline;
	letter-spacing: normal;
}

.prose {
	@include defs;
	color: inherit;
	font-size: var(--util-prose-fz-body);
	line-height: var(--util-prose-lh-body);
	max-width: none;

	#{select("[class~='lead']")} {
		font-size: var(--util-prose-fz-body-md);
		line-height: var(--util-prose-lh-body-md);
		margin-bottom: 1.2em;
		margin-top: 1.2em;
	}

	#{select(a)} {
		color: var(--cs-color-text-link);
		text-decoration: underline;
		text-decoration-color: var(--cs-color-text-link-underline);
		text-decoration-thickness: 1px;
	}

	#{select(strong, b)} {
		font-weight: var(--cs-font-weight-text-bold);
	}

	#{select(ol)} {
		list-style-type: decimal;
		padding-left: 1.625em;
	}

	#{select("ol[type='A']")} {
		list-style-type: upper-alpha;
	}

	#{select("ol[type='a']")} {
		list-style-type: lower-alpha;
	}

	#{select("ol[type='A s']")} {
		list-style-type: upper-alpha;
	}

	#{select("ol[type='a s']")} {
		list-style-type: lower-alpha;
	}

	#{select("ol[type='I']")} {
		list-style-type: upper-roman;
	}

	#{select("ol[type='i']")} {
		list-style-type: lower-roman;
	}

	#{select("ol[type='I s']")} {
		list-style-type: upper-roman;
	}

	#{select("ol[type='i s']")} {
		list-style-type: lower-roman;
	}

	#{select("ol[type='1']")} {
		list-style-type: decimal;
	}

	#{select(ul)} {
		list-style-type: disc;
		padding-left: 1.625em;
	}

	#{select("ol > li")}::marker {
		font-weight: var(--cs-font-weight-list-marker);
	}

	#{select("ul > li")}::marker {
		font-weight: var(--cs-font-weight-list-marker);
	}

	#{select(hr)} {
		border-color: var(--cs-color-border);
		border-top-width: 1px;
		margin-bottom: 3em;
		margin-top: 3em;
	}

	#{select(blockquote)} {
		border-left-color: var(--cs-color-border);
		border-left-width: 0.25rem;
		color: var(--cs-color-text-weaker);
		font-style: inherit;
		font-weight: var(--cs-font-weight-blockquote);
		margin-bottom: 1.6em;
		margin-top: 1.6em;
		padding-left: 1em;
		quotes: "\201C""\201D""\2018""\2019";
	}

	#{select("blockquote p:first-of-type")}::before {
		content: open-quote;
	}

	#{select("blockquote p:last-of-type")}::before {
		content: close-quote;
	}

	#{select(h1, h2, h3, h4)} {
		font-weight: var(--cs-font-weight-heading);
	}
	#{select(h5, h6)} {
		font-weight: var(--cs-font-weight-heading-sm);
	}

	#{select("h1 strong", "h2 strong", "h3 strong", "h4 strong")} {
		font-weight: var(--cs-font-weight-heading-bold);
	}

	#{select("h5 strong", "h6 strong")} {
		font-weight: var(--cs-font-weight-heading-sm-bold);
	}

	#{select('.htitle')} {
		font-size: var(--util-prose-fz-title);
		line-height: var(--util-prose-lh-title);
		margin-bottom: 0.75em;
		margin-top: 0;
	}

	#{select(h1, '.h1')} {
		font-size: var(--util-prose-fz-h1);
		line-height: var(--util-prose-lh-h1);
		margin-bottom: 0.8888889em;
		margin-top: 0;
	}

	#{select(h2, '.h2')} {
		font-size: var(--util-prose-fz-h2);
		line-height: var(--util-prose-lh-h2);
		margin-bottom: 1em;
		margin-top: 2em;
		scroll-margin-top: var(--scroll-mt);
	}

	#{select(h3, '.h3')} {
		font-size: var(--util-prose-fz-h3);
		line-height: var(--util-prose-lh-h3);
		margin-bottom: 0.6em;
		margin-top: 1.6em;
		position: relative;
		scroll-margin-top: var(--scroll-mt);
	}

	#{select(h4, '.h4')} {
		font-size: var(--util-prose-fz-h4);
		line-height: var(--util-prose-lh-h4);
		margin-bottom: 0.5em;
		margin-top: 1.5em;
	}

	#{select(h5, '.h5')} {
		font-size: var(--util-prose-fz-h5);
		line-height: var(--util-prose-lh-h5);
		margin-bottom: 0.325em;
		margin-top: 1.5em;
	}

	#{select(h6, '.h6')} {
		font-size: var(--util-prose-fz-h6);
		line-height: var(--util-prose-lh-h6);
		margin-bottom: 1em;
		margin-top: 1.5em;
	}

	#{select('figure > *')} {
		margin-bottom: 0;
		margin-top: 0;
	}

	#{select(figcaption)} {
		color: var(--cs-color-text-weakest);
		font-size: var(--util-prose-fz-body-sm);
		line-height: var(--util-prose-lh-body-sm);
		margin-top: 0.857em;
	}

	#{select(code)} {
		display: inline-block;
		font-size: inherit;
		font-variant-ligatures: none;
		font-weight: var(--cs-font-weight-code);
		position: relative;
	}

	#{select(code)}::before {
		content: "`";
	}

	#{select(code)}::after {
		content: "`";
	}

	#{select('a code')} {
		color: inherit;
	}

	#{select(pre)} {
		background-color: var(--code-background);
		border: 1px solid var(--cs-color-border);
		border-radius: 0;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
			0 2px 4px -2px rgba(0, 0, 0, 0.1);
		color: var(--cs-color-gray-15);
		display: flex;
		font-size: 0.875em;
		font-weight: var(--cs-font-weight-code-block);
		line-height: 1.7142857;
		margin-bottom: 2em;
		margin-top: 2em;
		overflow-x: auto;
		padding: 1.25rem;
		@media (--dark) {
			color: var(--cs-color-gray-04);
		}
	}

	:where(pre code):not(:where(#{$not})) {
		background-color: transparent;
		border-radius: 0;
		border-width: 0;
		color: inherit;
		flex: none;
		font-family: inherit;
		font-size: inherit;
		font-weight: inherit;
		line-height: inherit;
		min-width: 100%;
		padding: 0;
	}

	:where(pre code):not(:where(#{$not}))::before {
		content: none;
	}

	:where(pre code):not(:where(#{$not})):after {
		content: none;
	}

	:where(table):not(:where(#{$not})) {
		font-size: 0.875rem;
		line-height: 1.42;
		margin-bottom: 2em;
		margin-top: 2em;
		table-layout: auto;
		text-align: left;
		width: 100%;
	}

	:where(thead):not(:where(#{$not})) {
		border-bottom-color: var(--cs-color-border);
		border-bottom-width: 1px;
		color: inherit;
	}

	:where(thead th):not(:where(#{$not})) {
		color: inherit;
		font-weight: var(--cs-font-weight-table-heading);
		padding: 0 0.5714286em 0.5714286em;
		vertical-align: bottom;
	}

	:where(tbody tr):not(:where(#{$not})) {
		border-bottom-color: #f2f5f8;
		border-bottom-width: 1px;
	}

	:where(tbody tr:last-child):not(:where(#{$not})) {
		border-bottom-width: 1px;
	}

	:where(tbody td):not(:where(#{$not})) {
		padding: 0.5714286em;
		vertical-align: baseline;
	}

	:where(p):not(:where(#{$not})) {
		margin-bottom: 1.25em;
		margin-top: 1.25em;
	}

	:where(img):not(:where(#{$not})) {
		margin-bottom: 2em;
		margin-top: 2em;
	}

	:where(video):not(:where(#{$not})) {
		margin-bottom: 2em;
		margin-top: 2em;
	}

	:where(figure):not(:where(#{$not})) {
		margin-bottom: 2em;
		margin-top: 2em;
	}

	:where(h2 code):not(:where(#{$not})) {
		font-size: 0.875em;
	}

	:where(h3 code):not(:where(#{$not})) {
		font-size: 0.9em;
	}

	:where(li):not(:where(#{$not})) {
		margin-bottom: 0.5em;
		margin-top: 0.5em;
	}

	:where(ol > li):not(:where(#{$not})) {
		padding-left: 0.375em;
	}

	:where(ul > li):not(:where(#{$not})) {
		padding-left: 0.375em;
	}

	> :where(ul > li p):not(:where(#{$not})) {
		margin-bottom: 0.75em;
		margin-top: 0.75em;
	}

	> :where(ul > li > :first-child):not(:where(#{$not})) {
		margin-top: 1.25em;
	}

	> :where(ul > li > :last-child):not(:where(#{$not})) {
		margin-bottom: 1.25em;
	}

	> :where(ol > li > :first-child):not(:where(#{$not})) {
		margin-top: 1.25em;
	}

	> :where(ol > li > :last-child):not(:where(#{$not})) {
		margin-bottom: 1.25em;
	}

	:where(ul ul, ul ol, ol ul, ol ol):not(:where(#{$not})) {
		margin-bottom: 0.75em;
		margin-top: 0.75em;
	}

	:where(hr + *):not(:where(#{$not})) {
		margin-top: 0;
	}

	:where(h2 + *):not(:where(#{$not})) {
		margin-top: 0;
	}

	:where(h3 + *):not(:where(#{$not})) {
		margin-top: 0;
	}

	:where(h4 + *):not(:where(#{$not})) {
		margin-top: 0;
	}

	:where(thead th:first-child):not(:where(#{$not})) {
		padding-left: 0;
	}

	:where(thead th:last-child):not(:where(#{$not})) {
		padding-right: 0;
	}

	:where(tbody td:first-child):not(:where(#{$not})) {
		padding-left: 0;
	}

	:where(tbody td:last-child):not(:where(#{$not})) {
		padding-right: 0;
	}

	> :where(:first-child):not(:where(#{$not})) {
		margin-top: 0;
	}

	> :where(:last-child):not(:where(#{$not})) {
		margin-bottom: 0;
	}

	:where(a:visited):not(:where(#{$not})) {
		color: var(--cs-color-text-link-visited);
	}

	:where(a:hover):not(:where(#{$not})) {
		color: var(--cs-color-text-link-hover);
		text-decoration-color: var(--cs-color-text-link-underline-hover);
		text-decoration-thickness: 2px;
	}

	:where(a strong):not(:where(#{$not})) {
		color: inherit;
	}

	:where(p):not(:where(#{$not})) {
		font-weight: var(--cs-font-weight-text);
	}

	:where(li, dd):not(:where(#{$not})) {
		font-weight: var(--cs-font-weight-list-item);
	}

	:where(dd):not(:where(#{$not})) {
		margin-bottom: 0.5em;
	}

	:where(dt):not(:where(#{$not})) {
		font-weight: var(--cs-font-weight-list-item-heading);
		margin-top: 0.5em;
	}

	:where(h1, h2):not(:where(#{$not})) {
		position: relative;
		scroll-margin-top: var(--scroll-mt);
	}

	:where(h4, h5, h6):not(:where(#{$not})) {
		position: relative;
		scroll-margin-top: var(--scroll-mt);
	}

	:where(tbody code):not(:where(#{$not})) {
		font-size: 0.75rem;
	}

	:where(figure figcaption):not(:where(#{$not})) {
		font-style: italic;
	}

	:where(figure > figcaption):not(:where(#{$not})) {
		margin-top: 1.25em;
	}

	:where(figure > img):not(:where(#{$not})) {
		margin-bottom: 0;
	}

	:where(pre[data-line-numbers="true"]):not(:where(#{$not})) {
		padding-left: 3.5rem;
		position: relative;
	}

	:where(.codeblock-line):not(:where(#{$not})) {
		display: block;
		width: 100%;
	}

	:where(.codeblock-line[data-line-number]):not(:where([class~="not-prose"]
				*)) {
		position: relative;

		&::before {
			content: attr(data-line-number);
			position: absolute;
			font: inherit;
			line-height: inherit;
			display: block;
			right: calc(100% + 1rem);
			opacity: 0.325;
			text-align: right;
		}
	}

	:where(pre[data-lang]):not(:where(#{$not})) {
		position: relative;

		&::before {
			content: attr(data-lang);
			position: absolute;
			right: 1.325rem;
			top: 1.125rem;
			font-size: 0.8em;
			font-weight: var(--cs-font-weight-code-bold);
			text-transform: uppercase;
			letter-spacing: 2px;
			opacity: 0.325;
		}

		@media (--sm-down) {
			&::before {
				display: none;
			}
		}
	}

	:where(.footnote-ref, .footnote-back):not(:where(#{$not})) {
		display: inline-block;
		text-decoration: none;
		margin-left: 0.25em;
	}

	:where(.footnotes):not(:where(#{$not})) {
		color: var(--cs-color-text-weaker);

		ol {
			counter-reset: footnotes;
		}

		& li {
			list-style: none;
			position: relative;
		}

		& li::before {
			counter-increment: footnotes;
			content: counter(footnotes);
			position: absolute;
			top: 0;
			left: -1.5rem;
			font-weight: var(--cs-font-weight-list-marker);
			color: var(--cs-color-text-weakest);
			opacity: 0.8;
		}
	}

	:where(.data-footnote-backref):not(:where(#{$not})) {
		font-size: 80%;
		font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
			"Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
	}

	:where(aside):not(:where(#{$not})) {
		font-weight: inherit;
		font-style: inherit;
		margin-top: 1.6em;
		margin-bottom: 1.6em;
		padding: 1em;
		background-color: hsl(150 60% 57% / 0.1);
		border: 1px solid hsl(150 60% 57% / 0.5);
		border-radius: 0;

		> :where(:first-child) {
			margin-top: 0;
		}

		> :where(:last-child) {
			margin-bottom: 0;
		}
	}

	> :where(:first-child):not(:where(#{$not})) {
		margin-top: 0;
	}

	> :where(:last-child):not(:where(#{$not})) {
		margin-bottom: 0;
	}

	@media (--dark) {
		:where(pre):not(:where(#{$not})) {
			box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
				0 2px 4px -2px rgba(0, 0, 0, 0.1);
		}
	}
}

.prose-markdown {
	@media (--lg) {
		:where(h1, h2, h3, h4, h5, h6):not(:where(#{$not})) {
			position: relative;
		}

		:where(h1, h2, h3, h4, h5, h6):not(:where(#{$not}))::before {
			content: "#";
			position: absolute;
			right: calc(100% + 1rem);
			text-align: right;
			top: 0;
			opacity: 0.325;
		}

		:where(h2):not(:where(#{$not}))::before {
			content: "##";
		}

		:where(h3):not(:where(#{$not}))::before {
			content: "###";
		}

		:where(h4):not(:where(#{$not}))::before {
			content: "####";
		}

		:where(h5):not(:where(#{$not}))::before {
			content: "#####";
		}

		:where(h6):not(:where(#{$not}))::before {
			content: "######";
		}
	}
}
