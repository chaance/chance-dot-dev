@use "sass:map";
@use "sass:string";
@use "~/styles/lib/string" as cs_string;

// When/if supported...
@custom-media --smallest (max-width: 479px);
@custom-media --xs (min-width: 480px);
@custom-media --xs-down (max-width: 639px);
@custom-media --xs-only (min-width: 480px) and (max-width: 639px);
@custom-media --sm: (min-width: 640px);
@custom-media --sm-down: (max-width: 767px);
@custom-media --sm-only: (min-width: 640px) and (max-width: 767px);
@custom-media --md (min-width: 768px);
@custom-media --md-down (max-width: 1023px);
@custom-media --md-only (min-width: 768px) and (max-width: 1023px);
@custom-media --lg (min-width: 1024px);
@custom-media --lg-down (max-width: 1279px);
@custom-media --lg-only (min-width: 1024px) and (max-width: 1279px);
@custom-media --xl (min-width: 1280px);
@custom-media --xl-down (max-width: 1535px);
@custom-media --xl-only (min-width: 1280px) and (max-width: 1535px);
@custom-media --xxl (min-width: 1536px);
@custom-media --dark (prefers-color-scheme: dark);
@custom-media --motion (prefers-reduced-motion: no-preference);

// prettier-ignore
$queries: (
	"smallest": "(max-width: 479px)",
	"xs": "(min-width: 480px)",
	"xs-down": "(max-width: 639px)",
	"xs-only": "(min-width: 480px) and (max-width: 639px)",
	"sm": "(min-width: 640px)",
	"sm-down": "(max-width: 767px)",
	"sm-only": "(min-width: 640px) and (max-width: 767px)",
	"md": "(min-width: 768px)",
	"md-down": "(max-width: 1023px)",
	"md-only": "(min-width: 768px) and (max-width: 1023px)",
	"lg": "(min-width: 1024px)",
	"lg-down": "(max-width: 1279px)",
	"lg-only": "(min-width: 1024px) and (max-width: 1279px)",
	"xl": "(min-width: 1280px)",
	"xl-down": "(max-width: 1535px)",
	"xl-only": "(min-width: 1280px) and (max-width: 1535px)",
	"xxl": "(min-width: 1536px)",
	"dark": "(prefers-color-scheme: dark)",
	"motion": "(prefers-reduced-motion: no-preference)",
);

@function get($key) {
	$key: string.quote(string.unquote($key));
	$val: map-get($queries, $key);
	@if $val == null {
		@error "Unknown query key: #{$key}";
	}
	@if cs_string.starts_with($val, "(") {
		$val: string.slice($val, 2, string.length($val) - 1);
	}
	@if cs_string.ends_with($val, ")") {
		$val: string.slice($val, 0, string.length($val) - 1);
	}
	@return $val;
}
