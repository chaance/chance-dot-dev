import * as csstree from "css-tree";
import path from "node:path";
import fsp from "node:fs/promises";

const COLOR_PROPERTY_PREFIX = "cs-color";

const SRC_FILE = path.resolve(process.cwd(), "scripts", "colors.css");
const DEST_FILE = path.resolve(process.cwd(), "app/styles", "color.css");

async function main() {
	const baseColors = await getBaseColors();
	const comments =
		"/* DO NOT EDIT DIRECTLY. This file was generated by scripts/build-css-colors.mjs */\n";
	const contents = await getStylesheetContents();
	await fsp.writeFile(DEST_FILE, comments + contents, "utf-8");
	console.log("Done!");

	// Inspired and influenced by many systems before, but I borrowed liberally from
	// the naming conventions of the Nord design system.
	// https://nordhealth.design/tokens/#color
	async function getColorTokens() {
		return {
			accent: {
				light: getSystemColorVar("green", 10),
				dark: getSystemColorVar("green", 10),
			},
			"accent-deep": {
				light: getSystemColorVar("green", 12),
				dark: getSystemColorVar("green", 12),
			},
			text: {
				light: getSystemColorVar("gray", 18),
				dark: getSystemColorVar("gray", 1),
			},
			"text-weak": {
				light: getSystemColorVar("gray", 15),
				dark: getSystemColorVar("gray", 4),
			},
			"text-weaker": {
				light: getSystemColorVar("gray", 12),
				dark: getSystemColorVar("gray", 7),
			},
			"text-weakest": {
				light: getSystemColorVar("gray", 10),
				dark: getSystemColorVar("gray", 10),
			},
			"text-inverted": {
				light: getSystemColorVar("gray", 1),
				dark: getSystemColorVar("gray", 18),
			},
			"text-inverted-weak": {
				light: getSystemColorVar("gray", 4),
				dark: getSystemColorVar("gray", 15),
			},
			"text-inverted-weaker": {
				light: getSystemColorVar("gray", 7),
				dark: getSystemColorVar("gray", 12),
			},
			"text-inverted-weakest": {
				light: getSystemColorVar("gray", 10),
				dark: getSystemColorVar("gray", 10),
			},
			"text-error": {
				light: getSystemColorVar("red", 14),
				dark: getSystemColorVar("red", 6),
			},
			"text-success": {
				light: getSystemColorVar("mint", 14),
				dark: getSystemColorVar("mint", 6),
			},
			"text-link": {
				light: getSystemColorVar("green", 12),
				dark: getSystemColorVar("green", 5),
			},
			"text-link-visited": {
				light: getSystemColorVar("green", 14),
				dark: getSystemColorVar("green", 6),
			},
			"text-link-hover": {
				light: getSystemColorVar("green", 11),
				dark: getSystemColorVar("green", 6),
			},
			"text-link-underline": {
				light: (() => {
					const color = getSystemBaseColor("green", 10, { alpha: 0.4 });
					return color;
				})(),
				dark: getSystemBaseColor("green", 10, { alpha: 0.8 }),
			},
			"text-link-underline-hover": {
				light: getSystemColorVar("green", 9),
				dark: getSystemColorVar("green", 7),
			},
			background: {
				light: getSystemColorVar("gray", 1),
				dark: getSystemColorVar("gray", 19),
			},
			"background-raised": {
				light: getSystemColorVar("white"),
				dark: getSystemColorVar("gray", 18),
			},
			"background-translucent": {
				light: getSystemBaseColor("white", 10, { alpha: 0.5 }),
				dark: getSystemBaseColor("black", 10, { alpha: 0.6 }),
			},
			border: {
				light: getSystemColorVar("gray", 5),
				dark: getSystemColorVar("gray", 15),
			},
			"border-hover": {
				light: getSystemColorVar("gray", 17),
				dark: getSystemColorVar("gray", 3),
			},
			"border-weak": {
				light: getSystemColorVar("gray", 3),
				dark: getSystemColorVar("gray", 16),
			},
			"border-strong": {
				light: getSystemColorVar("gray", 12),
				dark: getSystemColorVar("gray", 8),
			},
			button: {
				light: getSystemColorVar("white"),
				dark: getSystemColorVar("gray", 18),
			},
			"button-hover": {
				light: getSystemColorVar("gray", 2),
				dark: getSystemColorVar("gray", 16),
			},
		};
	}

	/**
	 * @param {string} color
	 * @param {number | null} [scale=null]
	 * @param {Object} [args]
	 * @param {number|null} [args.alpha=null]
	 */
	function getSystemBaseColor(color, scale = null, { alpha = null }) {
		validateColorAlpha(alpha);
		validateColorScale(scale);
		const defs = baseColors.get(color);

		if (typeof defs === "string") {
			if (alpha != null) {
				return rgba(defs, alpha);
			}
			return defs;
		}

		if (scale == null) {
			scale = 10;
		}

		scale = String(scale).padStart(2, "0");
		if (typeof defs === "object") {
			const color = defs.get(scale);
			if (typeof color !== "string") {
				throw Error(`Invalid scale ${scale} for color ${color}`);
			}
			if (alpha != null) {
				return rgba(color, alpha);
			}
			return color;
		}

		throw Error(`Invalid color ${color}`);
	}

	async function getStylesheetContents() {
		const declarations = [];
		const darkTokens = new Map();
		const baseColors = await getBaseColors();
		const tokens = await getColorTokens();
		for (const [color, map] of baseColors) {
			if (typeof map === "string") {
				declarations.push(
					getPropDeclaration(
						getCustomPropName(COLOR_PROPERTY_PREFIX, color),
						map
					)
				);
			} else if (typeof map == "object") {
				for (const [scale, value] of map) {
					declarations.push(
						getPropDeclaration(
							getCustomPropName(COLOR_PROPERTY_PREFIX, color, scale),
							value
						)
					);
				}
			}
		}

		for (const [token, map] of Object.entries(tokens)) {
			if (typeof map === "string") {
				declarations.push(
					getPropDeclaration(
						getCustomPropName(COLOR_PROPERTY_PREFIX, token),
						getColorString(map)
					)
				);
			} else if (typeof map === "object") {
				for (let [theme, value] of Object.entries(map)) {
					value = getColorString(value);
					if (theme === "dark") {
						darkTokens.set(token, value);
					} else {
						declarations.push(
							getPropDeclaration(
								getCustomPropName(COLOR_PROPERTY_PREFIX, token),
								value
							)
						);
					}
				}
			}
		}

		let output = ":root {\n";
		for (const rule of declarations) {
			output += `\t${rule}\n`;
		}

		if (darkTokens.size > 0) {
			output += `\t@media (--dark) {\n`;
			for (const [token, value] of darkTokens) {
				output += `\t\t${getPropDeclaration(
					getCustomPropName(COLOR_PROPERTY_PREFIX, token),
					value
				)}\n`;
			}
			output += `\t}\n`;
		}

		output += `}\n`;

		return output;
	}
}

main();

async function getBaseColors() {
	const fileContents = await fsp.readFile(SRC_FILE, "utf-8");
	const ast = csstree.parse(fileContents);
	/** @type {Map<string, string | Map<string, string>>} */
	const map = new Map();
	csstree.walk(ast, (node) => {
		if (
			node.type === "Declaration" &&
			/^--[a-z]+(-\d{2})?$/.test(node.property)
		) {
			const [colorName, variant] = node.property.split("-").filter(Boolean);
			if (!variant) {
				map.set(colorName, node.value.value);
			} else {
				if (!map.has(colorName)) {
					map.set(colorName, new Map());
				}
				map.get(colorName).set(variant, node.value.value);
			}
		}
	});
	return map;
}

function validateColorScale(scale) {
	if (scale && typeof scale !== "number") {
		throw Error(
			`scale must be a number; received ${scale} of type ${typeof scale}`
		);
	}
	if (scale && (scale < 0 || scale > 19)) {
		throw Error(`scale must be an integer between 0 and 19; received ${scale}`);
	}
	return true;
}

function validateColorAlpha(alpha) {
	if (alpha != null && typeof alpha !== "number") {
		throw Error(
			`alpha must be a number; received ${alpha} of type ${typeof alpha}`
		);
	}
	if (alpha && (alpha <= 0 || alpha > 1)) {
		throw Error(
			`alpha must be an integer between 0.1 and 1; received ${alpha}`
		);
	}
	return true;
}

function getSystemColorVar(color, scale = null) {
	validateColorScale(scale);
	if (scale == null) {
		scale = 10;
	}
	scale = String(scale).padStart(2, "0");
	if (color == "white" || color == "black") {
		return `var(${getCustomPropName(COLOR_PROPERTY_PREFIX, color)})`;
	}
	return `var(${getCustomPropName(COLOR_PROPERTY_PREFIX, color, scale)})`;
}

function getColorString(value) {
	if (typeof value == "string") {
		return value;
	}
	throw Error(
		`Expected a color or string; received ${value} of type ${typeof value}`
	);
}

/**
 * @param {string} hex
 * @returns {[number, number, number] | null}
 */
function hexToRgb(hex) {
	let _hex = hex.trim();
	if (!isValidHex(_hex)) {
		return null;
	}
	if (_hex.length === 4) {
		// extend 3 digit hex to 6 digits
		_hex = _hex.replace(/([^#])/g, "$1$1");
	}
	const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(_hex);
	return result
		? [
				parseInt(result[1], 16),
				parseInt(result[2], 16),
				parseInt(result[3], 16),
		  ]
		: null;
}

function isValidHex(value) {
	return typeof value === "string" && /^#([a-f\d]{3}){1,2}$/i.test(value);
}

function rgba(hexColor, alpha) {
	const rgb = hexToRgb(hexColor.trim());
	if (!rgb) {
		throw Error(`Invalid hex color: ${hexColor}`);
	}
	return `rgba(${rgb.join(" ")} / ${alpha})`;
}

function getCustomPropName(...parts) {
	return `--${parts.join("-")}`;
}

function getPropDeclaration(name, value) {
	return [name, value].join(": ") + ";";
}
